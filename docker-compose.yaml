x-airflow-common: &airflow-common
  image: apache/airflow:2.9.3
  environment:
    &airflow-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "true"
    # Connection used by DAGs to store raster objects in Postgres within this stack
    AIRFLOW_CONN_VISS_DATA_DB: postgresql+psycopg2://airflow:airflow@postgres:5432/viss
    _PIP_ADDITIONAL_REQUIREMENTS: "-r /opt/airflow/requirements.txt"
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./data:/opt/airflow/data
    - ./requirements.txt:/opt/airflow/requirements.txt
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d

  airflow-init:
    <<: *airflow-common
    build:
      context: .
      dockerfile: docker/airflow-gdal.Dockerfile
    entrypoint: /bin/bash
    # Run init as root to avoid getpwuid uid-not-found when using arbitrary host UID
    user: "0:0"
    command: -c "\
      if [ -f /sources/requirements.txt ]; then \ 
        pip install --no-cache-dir -r /sources/requirements.txt; \ 
      fi; \ 
      airflow db migrate && \ 
      airflow users create --username airflow --password airflow --firstname Air --lastname Flow --role Admin --email admin@example.com"
    environment:
      <<: *airflow-env
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    volumes:
      - .:/sources

  airflow-webserver:
    <<: *airflow-common
    build:
      context: .
      dockerfile: docker/airflow-gdal.Dockerfile
    command: webserver
    environment:
      <<: *airflow-env
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  airflow-scheduler:
    <<: *airflow-common
    build:
      context: .
      dockerfile: docker/airflow-gdal.Dockerfile
    command: scheduler
    environment:
      <<: *airflow-env
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname \"$$HOSTNAME\""]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  airflow-triggerer:
    <<: *airflow-common
    build:
      context: .
      dockerfile: docker/airflow-gdal.Dockerfile
    command: triggerer
    environment:
      <<: *airflow-env
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type TriggererJob --hostname \"$$HOSTNAME\""]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

volumes:
  postgres-db-volume:
